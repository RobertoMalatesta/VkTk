#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(set = 0, binding = 0) uniform UniformBufferObject {
  mat4 matrix;
  vec3 origin;
  vec3 dir;
  uint ntri;
} ubo;

layout(set = 0, binding = 1) buffer lay0 { uint indices[]; } ibuf;
layout(set = 0, binding = 2) buffer lay1 { float verts[]; } vbuf;
layout(set = 0, binding = 3) buffer lay2 { bool results[]; } bbuf;

vec3 euclid (vec4 v) {
  return vec3(v.x/v.w, v.y/v.w, v.z/v.w);
}

void main() {
  const uint i = gl_GlobalInvocationID.x;
  if (i >= ubo.ntri)
  return;
  
  vec4 hv0 = ubo.matrix * vec4(vbuf.verts[3*ibuf.indices[i+0]+0],
			       vbuf.verts[3*ibuf.indices[i+0]+1],
			       vbuf.verts[3*ibuf.indices[i+0]+2],
			       1.0);
  vec4 hv1 = ubo.matrix * vec4(vbuf.verts[3*ibuf.indices[i+1]+0],
			       vbuf.verts[3*ibuf.indices[i+1]+1],
			       vbuf.verts[3*ibuf.indices[i+1]+2],
			       1.0);
  vec4 hv2 = ubo.matrix * vec4(vbuf.verts[3*ibuf.indices[i+2]+0],
			       vbuf.verts[3*ibuf.indices[i+2]+1],
			       vbuf.verts[3*ibuf.indices[i+2]+2],
			       1.0);
  vec3 v0 = euclid(hv0);
  vec3 v1 = euclid(hv1);
  vec3 v2 = euclid(hv2);

  vec3 edge1, edge2;
  vec3 h, s, q;
  float a, f, u, v;
  const float EPSILON = 0.0000001;

  edge1 = v1 - v0;
  edge2 = v2 - v0;

  h = cross(ubo.dir, edge2);
  a = dot(edge1, h);

  if (abs(a) < EPSILON) {
    bbuf.results[i] = false;
    return;
  }

  f = 1.0/a;
  s = ubo.origin - v0;
  u = f * dot(s, h);

  if (u < 0.0 || u > 1.0) {
    bbuf.results[i] = false;
    return;
  }

  q = cross(s, edge1);
  v = f * dot(ubo.dir, q);
  if (v < 0.0 ||  u + v > 1.0) {
    bbuf.results[i] = false;
    return;
  }

  float t = f * dot(edge2, q);
  if (t > EPSILON) {
    bbuf.results[i] = true;
    return;
  }

  bbuf.results[i] = false;
    
}

